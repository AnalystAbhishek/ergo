// Imports CTO files
import org.accordproject.contract.*
import org.accordproject.latedeliveryandpenalty.*

/* From template:
Late Delivery and Penalty. In case of delayed delivery[{" except for Force Majeure cases,":? forceMajeure}] the Seller shall pay to the Buyer for every [{penaltyDuration}] of delay penalty amounting to [{penaltyPercentage}]% of the total value of the Equipment whose delivery has been delayed. Any fractional part of a [{fractionalPart}] is to be considered a full [{fractionalPart}]. The total amount of penalty shall not however, exceed [{capPercentage}]% of the total value of the Equipment involved in late delivery. If the delay is more than [{termination}], the Buyer is entitled to terminate this Contract.
 */

// Declare a contract over a template model
contract LateDeliveryAndPenalty over TemplateModel {
  // Defines a function to calculate the penalty
  definition calculatePenalty(diff float, goodsValue float) float {
    // penalty formula
    const penalty = (diff / penaltyDuration.amount) * penaltyPercentage/100 * goodsValue;
    // penalty may be capped
    if penalty > capPercentage/100 * goodsValue {
       capPercentage/100 * goodsValue
    } else {
       penalty
    }
  }

  // Clause for volume discount
  clause latedeliveryandpenalty(req LateDeliveryAndPenaltyRequest) LateDeliveryAndPenaltyResponse {
    // difference between current date and agreed upon date
    define diff = moment.diff(moment.now(),agreed,penaltyDuration.unit);

    if (!moment.isAfter(moment.now(),agreed) then
    if forceMajeure && req.forceMajeure
    then LateDeliveryAndPenaltyResponse{ 0, true }
    else {
      define penalty = calculatePenalty(diff,req.goodsValue);
      LateDeliveryAndPenaltyResponse{ capped, diff > termination }
    }
  }
}
